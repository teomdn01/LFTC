program@statement_list@statement@simple_statement@assign_statement@input_output_statement@compound_statement@declaration_statement@type@struct_statement@if_statement@while_statement@condition@relation@expression@int_expression@string_expression@operation
#@;@identifier@=@+@-@*@/@@read@write@(@)@{@}@let@integer@char@string@bool@:@if@while@else@==@>@<@>=@<=@const_char@const_string
program
program-># statement_list #
statement_list->statement|statement statement_list
statement->simple_statement|struct_statement ;
simple_statement->assign_statement|input_output_statement
assign_statement->identifier = expression ;
input_output_statement->read(identifier);|write(identifier);
compound_statement->{ declaration_statement ; } statement|{ declaration_statement ; } statement ; compound_statement ;
declaration_statement->let type: identifier;
type->integer|char|string|bool
struct_statement->if_statement|while_statement
if_statement->if ( condition ) { compound_statement } else { compound_statement } ;
while_statement->while ( condition ) { compound_statement } ;
condition->expression relation expression
relation->==|>|<|>=|<=
expression->int_expression|string_expression|identifier
int_expression->const_int| int_expression operation int_expression
operation->+|-|*|/
string_expression->const_char|const_string|string_expression + string_expression
